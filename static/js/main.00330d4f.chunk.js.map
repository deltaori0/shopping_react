{"version":3,"sources":["component/card/styles.tsx","component/card/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Card","styled","div","CardContainer","CardHeader","CardImage","img","CardHot","CardName","CardAge","CardType","ButtonContainer","LinkButton","image","name","age","type","src","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2OAEaA,EAAOC,IAAOC,IAAV,mEAAGD,CAAH,qDAMJE,EAAgBF,IAAOC,IAAV,4EAAGD,CAAH,0GAYbG,EAAaH,IAAOC,IAAV,yEAAGD,CAAH,6BAiBVI,GAZmBJ,IAAOC,IAAV,+EAAGD,CAAH,kIAYJA,IAAOK,IAAV,wEAAGL,CAAH,kEASTM,EAAUN,IAAOC,IAAV,sEAAGD,CAAH,mCAKPO,EAAWP,IAAOC,IAAV,uEAAGD,CAAH,iFAORQ,EAAUR,IAAOC,IAAV,sEAAGD,CAAH,mEAQPS,EAAWT,IAAOC,IAAV,uEAAGD,CAAH,sFAQRU,EAAkBV,IAAOC,IAAV,8EAAGD,CAAH,uGAUfW,EAAaX,IAAOC,IAAV,0EAAGD,CAAH,2ECrDRD,GD8DSC,IAAOC,IAAV,wEAAGD,CAAH,MClFa,SAAC,GAAgC,IAA9BY,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,IAAKC,EAAW,EAAXA,KACrD,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,aAEF,kBAAC,EAAD,CAAaC,IAAKJ,IAClB,kBAAC,EAAD,KAAaC,GACb,kBAAC,EAAD,KAAYC,GACZ,kBAAC,EAAD,KAAaC,GACb,kBAAC,EAAD,KACE,kBAAC,EAAD,iCACA,kBAAC,EAAD,kC,+JCnBV,IAAMb,EAAgBF,IAAOC,IAAV,KAwCJgB,MAjCf,WACE,OACE,6BACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEL,MAAO,8DACPC,KAAM,eACNC,IAAK,6BACLC,KAAM,iBAER,kBAAC,EAAD,CACEH,MAAO,8DACPC,KAAM,qBACNC,IAAK,oBACLC,KAAM,uDAER,kBAAC,EAAD,CACEH,MAAO,8DACPC,KAAM,2BACNC,IAAK,oBACLC,KAAM,oCAER,kBAAC,EAAD,CACEH,MAAO,8DACPC,KAAM,eACNC,IAAK,oBACLC,KAAM,uCC1BIG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.00330d4f.chunk.js","sourcesContent":["import styled from \"styled-components/macro\";\r\n\r\nexport const Card = styled.div`\r\n  width: 230px;\r\n  height: 300px;\r\n  background-color: pink;\r\n`;\r\n\r\nexport const CardContainer = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  border: 1px solid black;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  align-items: center;\r\n`;\r\n\r\nexport const CardHeader = styled.div`\r\n  width: 100%;\r\n  height: 40px;\r\n`;\r\n\r\nexport const ContentContainer = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  align-items: flex-start;\r\n  justify-content: space-between;\r\n  padding: 20px;\r\n`;\r\n\r\nexport const CardImage = styled.img`\r\n  width: 40%;\r\n  height: 90px;\r\n\r\n  border-radius: 120px;\r\n\r\n  object-fit: cover;\r\n`;\r\n\r\nexport const CardHot = styled.div`\r\n  font-size: 12px;\r\n  color: #73dff2;\r\n`;\r\n\r\nexport const CardName = styled.div`\r\n  font-weight: bolder;\r\n  font-size: 15px;\r\n  margin: 0px 17.25px;\r\n  padding: 19px 0px 15px;\r\n`;\r\n\r\nexport const CardAge = styled.div`\r\n  font-weight: bolder;\r\n  font-size: 13px;\r\n  padding: 1px 0px;\r\n\r\n  color: gray;\r\n`;\r\n\r\nexport const CardType = styled.div`\r\n  font-weight: bolder;\r\n  font-size: 13px;\r\n  padding: 1px 0px;\r\n  margin-bottom: 60px;\r\n  color: gray;\r\n`;\r\n\r\nexport const ButtonContainer = styled.div`\r\n  width: 100%;\r\n  height: 40px;\r\n\r\n  border: 1px solid black;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n`;\r\n\r\nexport const LinkButton = styled.div`\r\n  width: 50%;\r\n  color: gray;\r\n  text-align: center;\r\n\r\n  font-size: 11px;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const CardMeta = styled.div``;\r\n","import React from \"react\";\r\n\r\nimport * as S from \"./styles\";\r\n\r\ninterface CardProps {\r\n  image?: string;\r\n  name?: string;\r\n  age?: string;\r\n  type?: string;\r\n}\r\n\r\nconst Card: React.FC<CardProps> = ({ image, name, age, type }) => {\r\n  return (\r\n    <S.Card>\r\n      <S.CardContainer>\r\n        <S.CardHeader>\r\n          <S.CardHot>HOT</S.CardHot>\r\n        </S.CardHeader>\r\n        <S.CardImage src={image}></S.CardImage>\r\n        <S.CardName>{name}</S.CardName>\r\n        <S.CardAge>{age}</S.CardAge>\r\n        <S.CardType>{type}</S.CardType>\r\n        <S.ButtonContainer>\r\n          <S.LinkButton>전체상품</S.LinkButton>\r\n          <S.LinkButton>마이샵 +</S.LinkButton>\r\n        </S.ButtonContainer>\r\n      </S.CardContainer>\r\n    </S.Card>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\nimport Card from \"./component/card\";\n\nimport styled from \"styled-components\";\n\nconst CardContainer = styled.div`\n  display: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nfunction App() {\n  return (\n    <div>\n      <CardContainer>\n        <Card\n          image={\"https://img.sta1.com/_up/store/2020/05/04/1588563909084.jpg\"}\n          name={\"사뿐\"}\n          age={\"10대,20대,30대\"}\n          type={\"슈즈\"}\n        />\n        <Card\n          image={\"https://img.sta1.com/_up/store/2020/01/23/1579748891347.jpg\"}\n          name={\"베니토\"}\n          age={\"20대,30대\"}\n          type={\"럭셔리,명품,페미닌\"}\n        />\n        <Card\n          image={\"https://img.sta1.com/_up/store/2020/04/03/1585884760828.jpg\"}\n          name={\"히프나틱\"}\n          age={\"10대,20대\"}\n          type={\"러블리,섹시\"}\n        />\n        <Card\n          image={\"https://img.sta1.com/_up/store/2020/04/28/1588046831617.jpg\"}\n          name={\"쵸퍼\"}\n          age={\"10대,20대\"}\n          type={\"러블리,섹시\"}\n        />\n      </CardContainer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}